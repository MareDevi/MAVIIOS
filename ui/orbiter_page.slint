// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { DemoPalette, Page, Label } from "common.slint";

enum OrbiterState { front, back }

export component Orbiter {
    in property <OrbiterState> state: OrbiterState.front;
    in-out property source <=> img.source;
    in-out property colorize <=> img.colorize;
    in property <angle> orbit-rotation: 0deg;
    in property <angle> offset: 45deg;
    in property <length> radius: 220px;
    property <angle> internal-rotation: orbit-rotation + offset;
    in property <angle> orbit-attack: 180deg;      
    in property <length> ball-size: 40px;
    property <length> zPos: sin(internal-rotation) * radius;
    out property <float> scale: 0.3 + 0.7 * (zPos + radius) / (2 * radius);
    property <bool> infront: internal-rotation.mod(360deg) < 180deg;

    function isVisible() -> bool {
        if (infront && state == OrbiterState.front) || (!infront && state == OrbiterState.back) {
            return true;
        } else   {
            return false;
        }
    }

    visible: isVisible();

    Rectangle {
        x: cos(orbit-attack) * cos(internal-rotation) * radius;
        y: sin(orbit-attack) * cos(internal-rotation) * radius;
        img := Image {
            width: root.ball-size * scale; 
            height: root.ball-size * scale;
            source: @image-url("images/planet.svg");
        }
    }
   
}

export component OrbiterWindow inherits Window {
    property <duration> orbitDuration: 5s;

    // Animation drivers
    property <angle> orbit-animation:  (360deg * animation-tick() / orbitDuration).mod(360deg);
    property <angle> attack-animation: (360deg * animation-tick() / 20s).mod(360deg);

    // Demo data
    property <[angle]> offSets: [0deg, 45deg, 90deg, 135deg, 180deg, 225deg, 270deg, 315deg];
    property <[[angle]]> attacks: [[0deg, 0deg], [45deg, 45deg], [90deg, 90deg], [0deg, 180deg], [45deg, 225deg], [90deg, 270deg]];
    property <image> slint-logo: @image-url("../../logo/slint-logo-small-dark.svg");

    in property <int> current-value;
    in property <bool> window-visible;

    background: lightgrey;
    animate background {
        duration: 1000ms;
        easing: ease-in-out-sine;
    }

    width: 100%;
    height: 100%;

    visible: window-visible;



    if current-value == 0: Rectangle {
        Orbiter {
            state: back;
            orbit-rotation: orbit-animation;
            orbit-attack: 45deg;
        }
    }



    if current-value == 1: Rectangle {
        for offSet in offSets:  Orbiter {
            state: back;
            orbit-rotation: orbit-animation;
            offset: offSet;
            orbit-attack: attack-animation;
        }
    }

    if current-value == 2: Rectangle {
        for attack[index] in attacks:  Orbiter {
            state: back;
            orbit-rotation: orbit-animation;
            orbit-attack: attack[0];
            offset: attack[1];
        }
    }
   

    Image {
        source: @image-url("images/planet.svg");
        width: 60px;
    }

    if current-value == 0: Rectangle {
        Orbiter {
            state: front;
            orbit-rotation: orbit-animation; 
            orbit-attack: 45deg;
        }
    }

    if current-value == 1: Rectangle {
        for offSet in offSets:  Orbiter {
            state: front;
            orbit-rotation: orbit-animation;
            offset: offSet;
            orbit-attack: attack-animation;
        }
    }

    if current-value == 2: Rectangle {
        for attack in attacks:  Orbiter {
            state: front;
            orbit-rotation: orbit-animation;
            orbit-attack: attack[0];
            offset: attack[1];
        }
    }
    
}


export component OrbiterPage inherits Page {
    header: "Orbiter Demo";
    in property <int> current-value;
    in property <bool> page-visible;

    Window {
        width: 100%;
        height: 170px;
        y: 30px;

        OrbiterWindow {
            current-value <=> root.current-value;
            window-visible: root.page-visible;
        }
    }



}
